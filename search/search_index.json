{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mosaic Plot # Mosaic Plot is a Grafana panel plugin for visualizing large datasets as heatmaps Mosaic Plot differs from existing heatmap panels by providing several additional features as well as by providing many more styling options Besides visualizing regular heatmaps, Mosaic Plot can be used to plot regular timeseries data with high cardinalities in a very space-efficient manner Mosaic Plot can be configured to be very compact, allowing a user to show a very large amount of data while taking up only a minimum porition of a dashboard's \"real estate\" View in GitHub View in Grafana","title":"Mosaic Plot"},{"location":"#mosaic-plot","text":"Mosaic Plot is a Grafana panel plugin for visualizing large datasets as heatmaps Mosaic Plot differs from existing heatmap panels by providing several additional features as well as by providing many more styling options Besides visualizing regular heatmaps, Mosaic Plot can be used to plot regular timeseries data with high cardinalities in a very space-efficient manner Mosaic Plot can be configured to be very compact, allowing a user to show a very large amount of data while taking up only a minimum porition of a dashboard's \"real estate\" View in GitHub View in Grafana","title":"Mosaic Plot"},{"location":"configuration_options/","text":"Configuration Options # Fields # Name Description Required Example Data Format Structure of the data source (See Data ) Required Amplitude Value field that determines the amplitude (color) of each cell Required Request Count, Error Count Breakdown String field/label (dimension) on which to split the data into different rows Required Host Name Group String field/label (dimension) used to group different rows based on common values Optional Cluster Name Hint See the data section for the distinction between fields and labels in Mosaic Plot Grid Properties # Name Description Shape Shape of each cell. Possible values are: \u2b1c Rectangle \u2b23 Hexagon \ud83e\udde9 Jigsaw \u2b24 Circle \ud83d\udd3f Stacked Circle Group Spacing Vertical separation between groups Sort Type Defines how rows should be sorted Sort Mode Sort ascending or descending Min Columns The minimum number of columns to display. If Focus is disabled, this property determines the number of columns to show Max Columns The maximum number of columns to display when focusing Aggregation Aggregate function to apply when there are more data points than columns. Possible values are: Sum Average Scale Type Scaling function for determining a cell's color. Possible values are: Squared Linear Square Root Log Max Type How the maximum value (for color scales) should be derived. Possible values are: From Data: Use the maximum value found in the query results Explicit: Use the value specified in the Max property Soft Max: Use the larger of { From Data , Explicit } See this issue for more info Max Explicit max value Max Rows The maximum number of rows to show (after sorting) Labels # Name Description Show Labels Controls the row labels. Possible values are: Series Group Buckets None Label Positions Controls the position of the labels. Possible values are: Horizontal Vertical Angle Left Margin Size of the labels margin Show X Axis Show or hide the horizontal axis Show Scale Show or hide the color scale Scale Width Horizontal width for the color scale Discrete Scale Divide the color scale into 5 discrete values Compact Mode If selected, hides everything except the grid itself Hint When Show Labels is set to Buckets , if Data Format is set to heatmap and the names of the rows are in the format <START_NUMBER>-<END_NUMBER> the row labels will show only the value of <START_NUMBER> , and only 10 values/buckets will be shown Style # Name Description Color Palette The color palette to use for coloring cells Invert Palette Invert the color palette's order Invert Colors Invert all colors used in the panel Zero Values Determines how empty (zero) cells should be treated. Possible values are: Regular: Using the lowest color in the selected palette Empty: No cell is created Customer: Use a custom color Zero Color Custom color to use for empty cells Outline Color Type Determines how cell outlines should be colored. Possible values are: Same as cell Custom Outline Color Custom color to use for cell outlines Outline Width The width of cells' outline Bevel Add a bevel effect to each cell (might degrade performance when the grid contains a large number of cells) Smoothing Create smooth color transitions between adjacent cells (might degrade performance when the grid contains a large number of cells) Enable Focus When focus is enabled, clicking on any part of the grid causes it to transition between Min Columns and Max Columns Random Seed Random seed for generating Jigsaw puzzle grids","title":"Configuration Options"},{"location":"configuration_options/#configuration-options","text":"","title":"Configuration Options"},{"location":"configuration_options/#fields","text":"Name Description Required Example Data Format Structure of the data source (See Data ) Required Amplitude Value field that determines the amplitude (color) of each cell Required Request Count, Error Count Breakdown String field/label (dimension) on which to split the data into different rows Required Host Name Group String field/label (dimension) used to group different rows based on common values Optional Cluster Name Hint See the data section for the distinction between fields and labels in Mosaic Plot","title":"Fields"},{"location":"configuration_options/#grid-properties","text":"Name Description Shape Shape of each cell. Possible values are: \u2b1c Rectangle \u2b23 Hexagon \ud83e\udde9 Jigsaw \u2b24 Circle \ud83d\udd3f Stacked Circle Group Spacing Vertical separation between groups Sort Type Defines how rows should be sorted Sort Mode Sort ascending or descending Min Columns The minimum number of columns to display. If Focus is disabled, this property determines the number of columns to show Max Columns The maximum number of columns to display when focusing Aggregation Aggregate function to apply when there are more data points than columns. Possible values are: Sum Average Scale Type Scaling function for determining a cell's color. Possible values are: Squared Linear Square Root Log Max Type How the maximum value (for color scales) should be derived. Possible values are: From Data: Use the maximum value found in the query results Explicit: Use the value specified in the Max property Soft Max: Use the larger of { From Data , Explicit } See this issue for more info Max Explicit max value Max Rows The maximum number of rows to show (after sorting)","title":"Grid Properties"},{"location":"configuration_options/#labels","text":"Name Description Show Labels Controls the row labels. Possible values are: Series Group Buckets None Label Positions Controls the position of the labels. Possible values are: Horizontal Vertical Angle Left Margin Size of the labels margin Show X Axis Show or hide the horizontal axis Show Scale Show or hide the color scale Scale Width Horizontal width for the color scale Discrete Scale Divide the color scale into 5 discrete values Compact Mode If selected, hides everything except the grid itself Hint When Show Labels is set to Buckets , if Data Format is set to heatmap and the names of the rows are in the format <START_NUMBER>-<END_NUMBER> the row labels will show only the value of <START_NUMBER> , and only 10 values/buckets will be shown","title":"Labels"},{"location":"configuration_options/#style","text":"Name Description Color Palette The color palette to use for coloring cells Invert Palette Invert the color palette's order Invert Colors Invert all colors used in the panel Zero Values Determines how empty (zero) cells should be treated. Possible values are: Regular: Using the lowest color in the selected palette Empty: No cell is created Customer: Use a custom color Zero Color Custom color to use for empty cells Outline Color Type Determines how cell outlines should be colored. Possible values are: Same as cell Custom Outline Color Custom color to use for cell outlines Outline Width The width of cells' outline Bevel Add a bevel effect to each cell (might degrade performance when the grid contains a large number of cells) Smoothing Create smooth color transitions between adjacent cells (might degrade performance when the grid contains a large number of cells) Enable Focus When focus is enabled, clicking on any part of the grid causes it to transition between Min Columns and Max Columns Random Seed Random seed for generating Jigsaw puzzle grids","title":"Style"},{"location":"data/","text":"Data # Requirements # The Mosaic Plot panel expects time series data frames, meaning each series must contain at least one field with time type (if multiple such fields exist, the first one will be used) Two data formats are supported: 1. Regular Data Format # This data format is applicable where each data frame has a numeric Amplitude field and a string Breakdown label to differentiate the different series. It can also contain an (optional) additional string label for grouping the different series. For example, let's assume that we want to plot the number of requests hitting a number of different servers Each server is located in some region For the above example, our data will contain a time field, a number field that represents the number of requests, and a string label representing the server name. It might also contain a string label represening the region name. The data will be presented in multiple frames, where each frame corresponds to a specific combination of label values. For example, each frame might look something like this: Time Host Region Requests 1647399651000 use1-03 us-east-1 234 1647399656000 use1-03 us-east-1 125 Time Host Region Requests 1647399651000 use1-02 us-east-1 163 1647399656000 use1-02 us-east-1 14 Time Host Region Requests 1647399651000 usw1-01 us-west-1 111 1647399656000 usw1-01 us-west-1 875 Currently, Mosaic Plot doesn't support the use case where all of the data is in a single data frame, like this: Time Host Region Requests 1647399651000 use1-03 us-east-1 234 1647399651000 use1-02 us-east-1 163 1647399651000 usw1-01 us-west-1 111 1647399656000 usw1-01 us-west-1 875 1647399656000 use1-03 us-east-1 125 1647399656000 use1-02 us-east-1 14 Hint Converting the above format (single data frame, no labels) to the supported one can be achieved by using the Prepare time series transform Hint When using the regular data format, rows are mapped to the Breakdown field 2. Heatmap Data Format # This data format is applicable where each data frame contains only a time field and a numeric value field. For example, let's assume we want to plot a heatmap of the number of requests over time, in bins representing response time ranges. Basically histograms over time. For the above example, our data will contain multiple data frames, where each frame has a time field and a value field, whose name represents the bucket (and vertical position in the plot). The data will contain multiple data frames that look something like this: Time 100-200 1647399651000 4 1647399656000 12 1647399661000 12 Time 200-500 1647399651000 1 1647399656000 24 1647399661000 4 Time 500-1000 1647399651000 0 1647399656000 10 1647399661000 9 Hint When using the heatmap data format, each row is mapped to a specific data frame Notes # Mosaic Plot expects that each data frame has the same fields Mosaic Plot expects that each data frame be of the same length Mosaic Plot doesn't currently support null values","title":"Data"},{"location":"data/#data","text":"","title":"Data"},{"location":"data/#requirements","text":"The Mosaic Plot panel expects time series data frames, meaning each series must contain at least one field with time type (if multiple such fields exist, the first one will be used) Two data formats are supported:","title":"Requirements"},{"location":"data/#1-regular-data-format","text":"This data format is applicable where each data frame has a numeric Amplitude field and a string Breakdown label to differentiate the different series. It can also contain an (optional) additional string label for grouping the different series. For example, let's assume that we want to plot the number of requests hitting a number of different servers Each server is located in some region For the above example, our data will contain a time field, a number field that represents the number of requests, and a string label representing the server name. It might also contain a string label represening the region name. The data will be presented in multiple frames, where each frame corresponds to a specific combination of label values. For example, each frame might look something like this: Time Host Region Requests 1647399651000 use1-03 us-east-1 234 1647399656000 use1-03 us-east-1 125 Time Host Region Requests 1647399651000 use1-02 us-east-1 163 1647399656000 use1-02 us-east-1 14 Time Host Region Requests 1647399651000 usw1-01 us-west-1 111 1647399656000 usw1-01 us-west-1 875 Currently, Mosaic Plot doesn't support the use case where all of the data is in a single data frame, like this: Time Host Region Requests 1647399651000 use1-03 us-east-1 234 1647399651000 use1-02 us-east-1 163 1647399651000 usw1-01 us-west-1 111 1647399656000 usw1-01 us-west-1 875 1647399656000 use1-03 us-east-1 125 1647399656000 use1-02 us-east-1 14 Hint Converting the above format (single data frame, no labels) to the supported one can be achieved by using the Prepare time series transform Hint When using the regular data format, rows are mapped to the Breakdown field","title":"1. Regular Data Format"},{"location":"data/#2-heatmap-data-format","text":"This data format is applicable where each data frame contains only a time field and a numeric value field. For example, let's assume we want to plot a heatmap of the number of requests over time, in bins representing response time ranges. Basically histograms over time. For the above example, our data will contain multiple data frames, where each frame has a time field and a value field, whose name represents the bucket (and vertical position in the plot). The data will contain multiple data frames that look something like this: Time 100-200 1647399651000 4 1647399656000 12 1647399661000 12 Time 200-500 1647399651000 1 1647399656000 24 1647399661000 4 Time 500-1000 1647399651000 0 1647399656000 10 1647399661000 9 Hint When using the heatmap data format, each row is mapped to a specific data frame","title":"2. Heatmap Data Format"},{"location":"data/#notes","text":"Mosaic Plot expects that each data frame has the same fields Mosaic Plot expects that each data frame be of the same length Mosaic Plot doesn't currently support null values","title":"Notes"},{"location":"examples/","text":"Examples # I. Server Stats # The following example showcases how a Mosaic Plot can be used to effectively visualize servers stats for a large number of servers We have 50 different servers in 4 different regions, and are interested in seeing for each server, the number of requests, error rate, CPU utilization and memory utilization Normally, it wouldn't be feasible to plot all 4 metrics over time for each of the 50 servers, so we would have to settle for summary stats We would have something like this: While this dashboard gives us a pretty good summary of the performance in each region, it is lacking in several aspects: There's not enough room in the dashboard to add requests and error rate stats over time The data that is shown over time is only per region. We have no way to see the behavior of specific servers By using Mosaic Plot panels, we can construct something like this: First, for each region, we've added two heatmaps One that shows the number of requests per server over time (white to blue) and one that shows the average error rate per server over time (green to red) By using Compact Mode we achieve an incredibly high data resolution. The top left heatmap for example (showing the number of requests per server in us-east-1), contains 2880 different cells/data points, while taking up the space that would normally fit only a sparkline or two, let alone trying to fit a line/area chart in that space Next, we've added two larger heatmaps The first shows the average CPU utilization of every server The second shows the average memory utilization of every server We've used the Grouping feature to clearly differentiate between each group of servers This type of visualization allows us to get a clear picture of both the individual performance of each server, as well as the overall trends for each region II. Basic Heatmaps # The following example shows 3 basic heatmaps, visualized as Mosaic Plots with different styling parameters: III. Variations # The following example shows the same data plotted plotted in 12 different styling variations Each column shows a different Shape : Rectangle , Hexagon , Stacked Circle and Circle The top row is the basic style The second row adds a Bevel effect The bottom row gets rid of the Outline and adds a Smoothing effect Hint Open the image in a separate tab (full size) to clearly see the subtle differences between the first and second row IV. More Variations # The following example shows the same data plotted plotted in 6 different styling variations The middle and right plots on the bottom show the use of the Discrete Scale option. It can be very useful when the values can be categorized, such as assigning different value ranges to categories such as GREAT , GOOD , AVERAGE , BAD and TERRIBLE Hint Open the image in a separate tab (full size) to clearly see the styling features in each plot V. Mandelbrot Set # Just for fun, let's plot the Mandelbrot set using Mosaic Plots:","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#i-server-stats","text":"The following example showcases how a Mosaic Plot can be used to effectively visualize servers stats for a large number of servers We have 50 different servers in 4 different regions, and are interested in seeing for each server, the number of requests, error rate, CPU utilization and memory utilization Normally, it wouldn't be feasible to plot all 4 metrics over time for each of the 50 servers, so we would have to settle for summary stats We would have something like this: While this dashboard gives us a pretty good summary of the performance in each region, it is lacking in several aspects: There's not enough room in the dashboard to add requests and error rate stats over time The data that is shown over time is only per region. We have no way to see the behavior of specific servers By using Mosaic Plot panels, we can construct something like this: First, for each region, we've added two heatmaps One that shows the number of requests per server over time (white to blue) and one that shows the average error rate per server over time (green to red) By using Compact Mode we achieve an incredibly high data resolution. The top left heatmap for example (showing the number of requests per server in us-east-1), contains 2880 different cells/data points, while taking up the space that would normally fit only a sparkline or two, let alone trying to fit a line/area chart in that space Next, we've added two larger heatmaps The first shows the average CPU utilization of every server The second shows the average memory utilization of every server We've used the Grouping feature to clearly differentiate between each group of servers This type of visualization allows us to get a clear picture of both the individual performance of each server, as well as the overall trends for each region","title":"I.  Server Stats"},{"location":"examples/#ii-basic-heatmaps","text":"The following example shows 3 basic heatmaps, visualized as Mosaic Plots with different styling parameters:","title":"II.  Basic Heatmaps"},{"location":"examples/#iii-variations","text":"The following example shows the same data plotted plotted in 12 different styling variations Each column shows a different Shape : Rectangle , Hexagon , Stacked Circle and Circle The top row is the basic style The second row adds a Bevel effect The bottom row gets rid of the Outline and adds a Smoothing effect Hint Open the image in a separate tab (full size) to clearly see the subtle differences between the first and second row","title":"III.  Variations"},{"location":"examples/#iv-more-variations","text":"The following example shows the same data plotted plotted in 6 different styling variations The middle and right plots on the bottom show the use of the Discrete Scale option. It can be very useful when the values can be categorized, such as assigning different value ranges to categories such as GREAT , GOOD , AVERAGE , BAD and TERRIBLE Hint Open the image in a separate tab (full size) to clearly see the styling features in each plot","title":"IV.  More Variations"},{"location":"examples/#v-mandelbrot-set","text":"Just for fun, let's plot the Mandelbrot set using Mosaic Plots:","title":"V.  Mandelbrot Set"},{"location":"features/","text":"Features # Grouping # By specifying a Group field , different series/rows can be grouped according to common values This has the following effects: Sorting is performed on each group first, and then by Breakdown field Groups of rows can be visually separated using the Group Spacing field Row labels can show only the group names, instead of all of the specific rows For example, lets say we have CPU utilization data for 50 different hosts, running in 5 different regions The heatmap will look something like this: Even though the rows are sorted such that they are effectively grouped by region (only because of the hosts' naming convention), it is still quite hard to distinguish between the different groups/regions, and be able to say something meaningful about the overall performance/trends in each region By using the Region label as the Group field, as well as applying some Group Spacing , we get: This very minor change in the visualization makes a big difference in our ability to reason about the trends in different regions Since we are mainly concerned with the overall regional performance, we can change the Show Labels field to Group to get: If we need to see the label for a specific row/host, we can always just hover over that row and see the tooltip data: Focus # The number of columns in a Mosaic Plot determines its resolution. Ideally, we would always show the maximum number of columns (which would be the number of data points in the underlying data). However, showing too many cells can impact the web page's performance To address this, the Min Columns field can be used to limit the number of columns that are displayed In some cases however, we might want to show panels with a limited number of columns, but then be able to (maybe temporarily) increase that number so we can get a higher resolution and notice more detail To enable this interactivity, the Enable Focus option must be enabled. Once it is enabled, clicking on any part of the panel will cause it to transition between the values in Min Columns and Max Columns Smoothing # When the Smoothing option is enabled, instead of simply coloring each cell according to its value, each cell is colored with a gradient, spanning from the color in the cell's left neighbor, to the cell's color Smoothing can make low resolution plots appear nicer, as well as remove visual artficats caused by arbitrary division of the data into cells:","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#grouping","text":"By specifying a Group field , different series/rows can be grouped according to common values This has the following effects: Sorting is performed on each group first, and then by Breakdown field Groups of rows can be visually separated using the Group Spacing field Row labels can show only the group names, instead of all of the specific rows For example, lets say we have CPU utilization data for 50 different hosts, running in 5 different regions The heatmap will look something like this: Even though the rows are sorted such that they are effectively grouped by region (only because of the hosts' naming convention), it is still quite hard to distinguish between the different groups/regions, and be able to say something meaningful about the overall performance/trends in each region By using the Region label as the Group field, as well as applying some Group Spacing , we get: This very minor change in the visualization makes a big difference in our ability to reason about the trends in different regions Since we are mainly concerned with the overall regional performance, we can change the Show Labels field to Group to get: If we need to see the label for a specific row/host, we can always just hover over that row and see the tooltip data:","title":"Grouping"},{"location":"features/#focus","text":"The number of columns in a Mosaic Plot determines its resolution. Ideally, we would always show the maximum number of columns (which would be the number of data points in the underlying data). However, showing too many cells can impact the web page's performance To address this, the Min Columns field can be used to limit the number of columns that are displayed In some cases however, we might want to show panels with a limited number of columns, but then be able to (maybe temporarily) increase that number so we can get a higher resolution and notice more detail To enable this interactivity, the Enable Focus option must be enabled. Once it is enabled, clicking on any part of the panel will cause it to transition between the values in Min Columns and Max Columns","title":"Focus"},{"location":"features/#smoothing","text":"When the Smoothing option is enabled, instead of simply coloring each cell according to its value, each cell is colored with a gradient, spanning from the color in the cell's left neighbor, to the cell's color Smoothing can make low resolution plots appear nicer, as well as remove visual artficats caused by arbitrary division of the data into cells:","title":"Smoothing"},{"location":"getting_started/","text":"Getting Started # Plugin Test Environment # The simplest way to play around with Mosaic Plot is to use the docker-compose plugin test environment Docker compose will run a container with a Grafana instance (on port 3000) that has the Mosaic Plot plugin installed, along with a number of sample dashboards Example Dashboards # If Mosaic Plot is already installed in your Grafana instance, you can play around with it by using the following dashboards (create a new dashboard and then just copy the JSON contents into the JSON Model) Hint The dashboards are self contained (no external data required). They all use the standard TestData DB datasource with static content Heatmaps Demo (Source) Mandelbrot Set (Source) Variations Demo (Source) Variations 2 Demo (Source)","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#plugin-test-environment","text":"The simplest way to play around with Mosaic Plot is to use the docker-compose plugin test environment Docker compose will run a container with a Grafana instance (on port 3000) that has the Mosaic Plot plugin installed, along with a number of sample dashboards","title":"Plugin Test Environment"},{"location":"getting_started/#example-dashboards","text":"If Mosaic Plot is already installed in your Grafana instance, you can play around with it by using the following dashboards (create a new dashboard and then just copy the JSON contents into the JSON Model) Hint The dashboards are self contained (no external data required). They all use the standard TestData DB datasource with static content Heatmaps Demo (Source) Mandelbrot Set (Source) Variations Demo (Source) Variations 2 Demo (Source)","title":"Example Dashboards"}]}